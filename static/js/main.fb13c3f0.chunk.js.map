{"version":3,"sources":["MineCount.tsx","Utilities/secondsToTimerFormat.tsx","Timer.tsx","Utilities/useInterval.tsx","ResetButton.tsx","LeaderboardButton.tsx","Header.tsx","MinefieldSquare.tsx","Minefield.tsx","Leaderboard.tsx","Utilities/asdfdlkfj.ts","Utilities/shuffle.tsx","Utilities/neighboursOf.tsx","Utilities/generateMinefieldArray.tsx","Utilities/fillFromZeroToN.tsx","Utilities/initialAppState.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["MineCount","props","react_default","a","createElement","id","mineCount","secondsToTimerFormat","seconds","minutes","Math","floor","secs","Timer","intervalFunction","interval","savedIntervalFunction","useRef","useEffect","current","intervalIdentifier","setInterval","clearInterval","useInterval","tick","shouldTick","time","ResetButton","className","style","onClick","manageClick","LeaderboardButton","Header","MineCount_MineCount","Timer_Timer","timerShouldTick","ResetButton_ResetButton","resetButtonStyle","resetButtonClicked","LeaderboardButton_LeaderboardButton","leaderboardButtonClicked","MinefieldSquare","onMouseDown","e","canClick","button","manageSquareLeftClick","manageSquareRightClick","square","onMouseUp","manageSquareMouseUp","content","Minefield","squareStyle","isFlagged","isDiscovered","isAMine","numberOfNeighbouringMines","number","minefield","map","i","MinefieldSquare_MinefieldSquare","key","canClickSquares","Leaderboard","justFirstFive","scores","sort","b","score","slice","modalWasClicked","length","entry","date","day","getDate","month","getMonth","formattedDate","removeScoresButtonClicked","shuffle","arr","Object","toConsumableArray","random","neighboursOf","index","gridLength","lastIndexInGrid","indexIsOnTheTopRow","indexIsOnTheLeftmostColumn","indexIsOnTheRightmostColumn","indexIsOnTheBottomRow","directlyAbove","directlyBelow","flatMap","x","generateMinefieldArray","args","n","indexes","gridlength","Array","fill","_","mineIndexes","numberOfMines","includes","filter","mineSquares","initialMinefield","initialAppState","leaderboardShouldShow","JSON","parse","localStorage","getItem","stored","asDates","Date","getStoredHighScores","mouseButtonIsDown","Boolean","window","location","hostname","match","document","oncontextmenu","ReactDOM","render","_useState","useState","_useState2","slicedToArray","state","setState","discoverSquares","squares","currentDate","currentTime","newMineField","objectSpread","newHighScore","newHighScores","concat","setItem","stringify","gameHasBegun","gameIsWon","gameIsLost","numberOfFlaggedSquares","Leaderboard_Leaderboard","removeItem","Header_Header","newTime","Minefield_Minefield","newFlagState","s","searchSquares","toSearch","searched","currentSearch","newToSearch","newSearched","removedCurrentSearchFromToSearch","squareIndex","indexOf","unsearchedNeighbours","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb13c3f0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { MineCountProps } from \"./Interfaces\";\r\nimport './MineCount.scss'\r\n\r\nexport const MineCount = (props: MineCountProps) =>\r\n    <div id=\"mine-count\">{props.mineCount}</div>","\r\nexport function secondsToTimerFormat(seconds: number) {\r\n    const minutes = Math.floor(seconds / 60)\r\n    const secs = seconds - minutes * 60\r\n    const preMin = minutes < 10 ? \"0\" : \"\"\r\n    const preSec = secs < 10 ? \"0\" : \"\"\r\n    return preMin + minutes + \":\" + preSec + secs\r\n}\r\n","import { TimerProps } from \"./Interfaces\";\r\nimport React from 'react';\r\nimport { useInterval } from \"./Utilities/useInterval\";\r\nimport { secondsToTimerFormat } from \"./Utilities/secondsToTimerFormat\";\r\nimport './Timer.scss'\r\n\r\nexport const Timer = (props: TimerProps) => {\r\n\r\n    useInterval(props.tick, props.shouldTick ? 1000 : null)\r\n\r\n    return <div id=\"timer\">{secondsToTimerFormat(props.time)}</div>\r\n}\r\n","import { useRef, useEffect } from \"react\";\r\n\r\nexport const useInterval = (intervalFunction: any, interval: any) => {\r\n  const savedIntervalFunction = useRef();\r\n\r\n  useEffect(() => {\r\n    savedIntervalFunction.current = intervalFunction;\r\n  }, [intervalFunction]);\r\n\r\n  useEffect(() => {\r\n    if (interval !== null) {\r\n      const intervalIdentifier = setInterval(() => (savedIntervalFunction as any).current(), interval);\r\n      return () => clearInterval(intervalIdentifier);\r\n    }\r\n  }, [interval]);\r\n}\r\n\r\n","import React from 'react'\r\nimport { ResetButtonProps } from './Interfaces';\r\nimport './ResetButton.scss'\r\n\r\nexport const ResetButton = (props: ResetButtonProps) =>\r\n    <button id=\"reset-button\" className={props.style} onClick={props.manageClick}></button>\r\n","import React from 'react'\r\nimport { LeaderboardButtonProps } from './Interfaces'\r\nimport './LeaderboardButton.scss'\r\n\r\nexport const LeaderboardButton = (props: LeaderboardButtonProps) =>\r\n    <button id=\"leaderboard-button\" onClick={props.manageClick}></button>","import React from 'react'\r\nimport { HeaderProps } from \"./Interfaces\"\r\nimport { MineCount } from './MineCount'\r\nimport { Timer } from \"./Timer\"\r\nimport { ResetButton } from \"./ResetButton\"\r\nimport { LeaderboardButton } from \"./LeaderboardButton\"\r\nimport './Header.scss'\r\n\r\nexport const Header = (props: HeaderProps) =>\r\n    <header>\r\n        <div id=\"header-content\">\r\n            <div>\r\n                <MineCount mineCount={props.mineCount} />\r\n            </div>\r\n            <div>\r\n                <Timer time={props.time} shouldTick={props.timerShouldTick} tick={props.tick} />\r\n            </div>\r\n            <ResetButton style={props.resetButtonStyle} manageClick={props.resetButtonClicked} />\r\n            <LeaderboardButton manageClick={props.leaderboardButtonClicked} />\r\n        </div>\r\n    </header>","import React from 'react'\r\nimport { MinefieldSquareProps } from './Interfaces'\r\nimport './MinefieldSquare.scss'\r\n\r\nexport const MinefieldSquare = (props: MinefieldSquareProps) =>\r\n    <div\r\n        id={props.id}\r\n        className={props.style}\r\n        onMouseDown={e => props.canClick && e.button === 0 ? props.manageSquareLeftClick() : e.button === 2 ? props.manageSquareRightClick(props.square) : null}\r\n        onMouseUp={e => props.canClick && e.button === 0 ? props.manageSquareMouseUp(props.square) : null}>\r\n        {props.content}\r\n    </div>","import React from 'react'\r\nimport { MinefieldProps, MinefieldSquareType } from './Interfaces'\r\nimport { MinefieldSquare } from './MinefieldSquare'\r\nimport './Minefield.scss'\r\n\r\nexport const Minefield = (props: MinefieldProps) => {\r\n\r\n    const numberedSquareStyle = (number: number) =>\r\n        number >= 4 ? \"square-numbered-four\"\r\n            : number === 3 ? \"square-numbered-three\"\r\n                : number === 2 ? \"square-numbered-two\"\r\n                    : \"square-numbered-one\"\r\n\r\n    const squareStyle = (square: MinefieldSquareType) => \r\n        square.isFlagged ? \"square-flagged\"\r\n            : !square.isDiscovered ? \"square-undiscovered\"\r\n                : square.isDiscovered && square.isAMine ? \"square-mine\"\r\n                    : square.isDiscovered && square.numberOfNeighbouringMines === 0 ? \"square-discovered\"\r\n                        : numberedSquareStyle(square.numberOfNeighbouringMines)\r\n\r\n    const content = (square: MinefieldSquareType) =>\r\n        square.isFlagged ? null\r\n            : square.isDiscovered && square.numberOfNeighbouringMines > 0 ? square.numberOfNeighbouringMines\r\n                : null\r\n\r\n    return (\r\n        <div id=\"minefield\">\r\n            {props.minefield.map((square, i) =>\r\n                <MinefieldSquare\r\n                    key={i}\r\n                    style={squareStyle(square)}\r\n                    id={props.canClickSquares && !square.isDiscovered && !square.isFlagged ? \"undiscovered-minefield-square\" : \"minefield-square\"}\r\n                    manageSquareLeftClick={props.manageSquareLeftClick}\r\n                    manageSquareRightClick={props.manageSquareRightClick}\r\n                    manageSquareMouseUp={props.manageSquareMouseUp}\r\n                    square={square}\r\n                    content={content(square)}\r\n                    canClick={props.canClickSquares}\r\n                ></MinefieldSquare>)}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './Leaderboard.scss'\r\nimport { LeaderboardProps } from './Interfaces';\r\nimport { formattedDate, formattedScore } from './Utilities/asdfdlkfj';\r\n\r\nexport const Leaderboard = (props: LeaderboardProps) => {\r\n\r\n    const orderedScoresByAscending = props.scores.sort((a, b) => a.score - b.score)\r\n    const justFirstFive = orderedScoresByAscending.slice(0, 4)\r\n\r\n    return (\r\n        <div id=\"modal\" onClick={props.modalWasClicked}>\r\n            <div id=\"leaderboard\">\r\n                <h1>LEADERBOARD</h1>\r\n                \r\n                {!props.scores.length &&\r\n                    <div>No scores yet</div>}\r\n                <ol>\r\n                    {justFirstFive.map((entry, i) =>\r\n                        <li className=\"leaderboard-item\">\r\n                            <div className=\"entryName\">\r\n                                <div>{i + 1}</div>\r\n                                <div>{formattedDate(entry.date)}</div>\r\n                            </div>\r\n                            <div>{formattedScore(entry.score)}</div>\r\n                        </li>\r\n                    )}\r\n                </ol>\r\n\r\n                {!!props.scores.length &&\r\n                    <button onClick={() => props.removeScoresButtonClicked()}>CLEAR SCORES</button>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { secondsToTimerFormat } from \"./secondsToTimerFormat\";\r\n\r\nexport function formattedDate(date: Date) {\r\n    const day = date.getDate()\r\n    const month = date.getMonth()\r\n    const preDay = day < 10 ? \"0\" : \"\"\r\n    const preMonth = (month + 1) < 10 ? \"0\" : \"\"\r\n    return preDay + day + \"/\" + preMonth + (month + 1)\r\n}\r\n\r\nexport function formattedScore(score: number) {\r\n    return secondsToTimerFormat(score)\r\n}","export const shuffle = (arr: number[]) => [...arr].sort(() => Math.random() - 0.5)","export function neighboursOf(index: number, gridLength: number) {\r\n\r\n    const lastIndexInGrid = (gridLength * gridLength) - 1\r\n    const indexIsOnTheTopRow = index < gridLength\r\n    const indexIsOnTheLeftmostColumn = index % gridLength === 0\r\n    const indexIsOnTheRightmostColumn = (index % gridLength) === (gridLength - 1)\r\n    const indexIsOnTheBottomRow = (index > (lastIndexInGrid - gridLength)) && (index < (lastIndexInGrid + 1))\r\n\r\n    const topLeftDiagonal = () => indexIsOnTheTopRow || indexIsOnTheLeftmostColumn ? [] : [directlyAbove()[0] - 1]\r\n    const directlyAbove = () => indexIsOnTheTopRow ? [] : [index - gridLength]\r\n    const topRightDiagonal = () => indexIsOnTheTopRow || indexIsOnTheRightmostColumn ? [] : [directlyAbove()[0] + 1]\r\n    const directlyRight = () => indexIsOnTheRightmostColumn ? [] : [index + 1]\r\n    const bottomRightDiagonal = () => indexIsOnTheBottomRow || indexIsOnTheRightmostColumn ? [] : [directlyBelow()[0] + 1]\r\n    const directlyBelow = () => indexIsOnTheBottomRow ? [] : [index + gridLength]\r\n    const directlyLeft = () => indexIsOnTheLeftmostColumn ? [] : [index - 1]\r\n    const bottomLeftDiagonal = () => indexIsOnTheBottomRow || indexIsOnTheLeftmostColumn ? [] : [directlyBelow()[0] - 1]\r\n\r\n\r\n    return [topLeftDiagonal(),\r\n            directlyAbove(),\r\n            topRightDiagonal(),\r\n            directlyRight(),\r\n            bottomRightDiagonal(),\r\n            directlyBelow(),\r\n            directlyLeft(),\r\n            bottomLeftDiagonal()]\r\n               .flatMap(x => x)\r\n}","import { fillFromZeroToN } from \"./fillFromZeroToN\";\r\nimport { shuffle } from \"./shuffle\";\r\nimport { neighboursOf } from \"./neighboursOf\";\r\nimport { MinefieldArrayArguments } from \"../Interfaces\";\r\n\r\nexport function generateMinefieldArray(args: MinefieldArrayArguments) {\r\n    const indexes = fillFromZeroToN((args.gridlength * args.gridlength) - 1)\r\n    const mineIndexes = shuffle(indexes).slice(0, args.numberOfMines)\r\n    const minefield = indexes.map(i => ({\r\n        isAMine: mineIndexes.includes(i),\r\n        isFlagged: false,\r\n        isDiscovered: false,\r\n        numberOfNeighbouringMines: neighboursOf(i, args.gridlength).filter(x => mineIndexes.includes(x)).length\r\n    }))\r\n    const mineSquares = mineIndexes.map(i => minefield[i])\r\n    return {minefield: minefield, mineSquares: mineSquares, numberOfMines: args.numberOfMines, gridlength: args.gridlength}\r\n}\r\n","export function fillFromZeroToN(n: number) {\r\n    return Array(n + 1).fill(0).map((_, i) => i)\r\n  }","import { generateMinefieldArray } from \"./generateMinefieldArray\";\r\n\r\nexport const initialMinefield = generateMinefieldArray({ gridlength: 10, numberOfMines: 12 })\r\n\r\nexport const initialAppState = {\r\n    time: 0,\r\n    leaderboardShouldShow: false,\r\n    gridLength: 10,\r\n    numberOfMines: 12,\r\n    minefield: initialMinefield.minefield,\r\n    mineSquares: initialMinefield.mineSquares,\r\n    scores: getStoredHighScores(),\r\n    mouseButtonIsDown: false\r\n}\r\n\r\nexport function getStoredHighScores() {\r\n    if (JSON.parse(localStorage.getItem('minesweeperScores')!) === null) {\r\n        return []\r\n    } else {\r\n        const stored = JSON.parse(localStorage.getItem('minesweeperScores')!) as Array<{date: string, score: number}>\r\n        const asDates = stored.map(entry => ({date: new Date(entry.date), score: entry.score}))\r\n        return asDates\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.oncontextmenu = () => false\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import './App.scss';\r\nimport React, { useState } from 'react'\r\nimport { Header } from \"./Header\";\r\nimport { Minefield } from \"./Minefield\";\r\nimport { Leaderboard } from \"./Leaderboard\";\r\nimport { generateMinefieldArray } from \"./Utilities/generateMinefieldArray\";\r\nimport { neighboursOf } from \"./Utilities/neighboursOf\";\r\nimport { MinefieldSquareType } from './Interfaces';\r\nimport { initialAppState } from './Utilities/initialAppState';\r\n\r\nexport const App = () => {\r\n\r\n    const [state, setState] = useState(initialAppState)\r\n\r\n    function resetGame() {\r\n        const newMineField = generateMinefieldArray({ gridlength: state.gridLength, numberOfMines: state.numberOfMines })\r\n        setState(state => ({\r\n            ...state,\r\n            time: 0,\r\n            minefield: newMineField.minefield,\r\n            mineSquares: newMineField.mineSquares\r\n        }))\r\n    }\r\n\r\n    function squareMouseUp(square: MinefieldSquareType) {\r\n        if (!square.isFlagged) {\r\n            if (square.isAMine) {\r\n                discoverSquares(state.mineSquares)\r\n            } else if (square.numberOfNeighbouringMines > 0) {\r\n                discoverSquares([square])\r\n            } else {\r\n                const squaresToDiscover = searchSquares([square], [])\r\n                discoverSquares(squaresToDiscover)\r\n            }\r\n        }\r\n    }\r\n\r\n    function squareWasRightClicked(square: MinefieldSquareType) {\r\n        const newFlagState = !square.isFlagged\r\n        const newMineField = state.minefield.map(s => s === square ? { ...s, isFlagged: newFlagState } : s)\r\n        if (!square.isDiscovered) setState(state => ({ ...state, minefield: newMineField }))\r\n    }\r\n\r\n    function squareWasLeftClicked() {\r\n        setState(state => ({...state, mouseButtonIsDown: true}))\r\n    }\r\n\r\n    function removeHighScores() {\r\n        localStorage.removeItem('minesweeperScores')\r\n        delete window.localStorage['minesweeperScores']\r\n        setState(state => ({ ...state, scores: [] }))\r\n    }\r\n\r\n    function searchSquares(toSearch: MinefieldSquareType[], searched: MinefieldSquareType[]): MinefieldSquareType[] {\r\n\r\n        if (!toSearch.length) return searched\r\n\r\n        const currentSearch = toSearch[0]\r\n\r\n        if (searched.includes(currentSearch)) {\r\n            const newToSearch = toSearch.slice(1)\r\n            return searchSquares(newToSearch, searched)\r\n        } else if (currentSearch.numberOfNeighbouringMines > 0) {\r\n            const newToSearch = toSearch.slice(1)\r\n            const newSearched = [...searched, currentSearch]\r\n            return searchSquares(newToSearch, newSearched)\r\n        } else {\r\n            const newSearched = [...searched, currentSearch]\r\n            const removedCurrentSearchFromToSearch = toSearch.slice(1)\r\n            const squareIndex = state.minefield.indexOf(currentSearch)\r\n            const unsearchedNeighbours = neighboursOf(squareIndex, state.gridLength).map(i => state.minefield[i]).filter(s => !searched.includes(s))\r\n            const newToSearch = [...removedCurrentSearchFromToSearch, ...unsearchedNeighbours]\r\n            return searchSquares(newToSearch, newSearched)\r\n        }\r\n    }\r\n\r\n    function discoverSquares(squares: MinefieldSquareType[]) {\r\n        const currentDate: Date = new Date()\r\n        const currentTime = state.time\r\n        const newMineField = state.minefield.map(square => (squares.includes(square) ? { ...square, isDiscovered: true } : square))\r\n\r\n        if (newMineField.filter(square => !square.isAMine && !square.isDiscovered).length === 0) {\r\n            const newHighScore = { date: currentDate, score: currentTime }\r\n            const newHighScores = [...state.scores, newHighScore]\r\n            localStorage.setItem('minesweeperScores', JSON.stringify(newHighScores))\r\n            setState(state => ({ ...state, minefield: newMineField, scores: newHighScores, leaderboardShouldShow: true, mouseButtonIsDown: false }))\r\n        } else {\r\n            setState(state => ({ ...state, minefield: newMineField, mouseButtonIsDown: false}))\r\n        }\r\n    }\r\n\r\n    function tick() {\r\n        const newTime = state.time + 1\r\n        setState(state => ({ ...state, time: newTime }))\r\n    }\r\n\r\n    function leaderboardClicked() {\r\n        setState(state => ({ ...state, leaderboardShouldShow: true }))\r\n    }\r\n\r\n    function modalWasClicked() {\r\n        setState(state => ({ ...state, leaderboardShouldShow: false }))\r\n    }\r\n\r\n    const gameHasBegun = state.minefield.filter(square => square.isDiscovered).length !== 0\r\n    const gameIsWon = state.minefield.filter(square => !square.isAMine && !square.isDiscovered).length === 0\r\n    const gameIsLost = state.minefield.filter(square => square.isAMine && square.isDiscovered).length > 0\r\n    const numberOfFlaggedSquares = state.minefield.filter(square => square.isFlagged).length\r\n    const mineCount = state.numberOfMines - numberOfFlaggedSquares\r\n    const resetButtonStyle = state.mouseButtonIsDown ? \"placing\" : gameIsWon ? \"win\" : gameIsLost ? \"lost\" : \"normal\"\r\n    const timerShouldTick = gameHasBegun && !gameIsLost && !gameIsWon\r\n\r\n    return (\r\n        <div>\r\n            {state.leaderboardShouldShow &&\r\n                <Leaderboard removeScoresButtonClicked={removeHighScores} scores={state.scores} modalWasClicked={modalWasClicked}></Leaderboard>}\r\n\r\n            <Header\r\n                mineCount={mineCount}\r\n                time={state.time}\r\n                timerShouldTick={timerShouldTick}\r\n                tick={tick}\r\n                resetButtonClicked={resetGame}\r\n                resetButtonStyle={resetButtonStyle}\r\n                leaderboardButtonClicked={leaderboardClicked} />\r\n\r\n            <main>\r\n                <Minefield\r\n                    minefield={state.minefield}\r\n                    gridlength={state.gridLength}\r\n                    manageSquareLeftClick={squareWasLeftClicked}\r\n                    manageSquareRightClick={squareWasRightClicked}\r\n                    manageSquareMouseUp={squareMouseUp}\r\n                    canClickSquares={!gameIsLost && !gameIsWon} />\r\n            </main>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}